
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b94  08003b94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000099d5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c85  00000000  00000000  00029a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000730  00000000  00000000  0002c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fddd  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d15f  00000000  00000000  0004c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0d90  00000000  00000000  000596a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000025f8  00000000  00000000  0011a434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0011ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b54 	.word	0x08003b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b54 	.word	0x08003b54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CS43L22_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CS43L22_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
	// Enable chip
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	4863      	ldr	r0, [pc, #396]	; (800065c <CS43L22_Init+0x198>)
 80004d0:	f001 fb30 	bl	8001b34 <HAL_GPIO_WritePin>
	//
	// Initialization
	//
	uint8_t TxBuffer[2];

	TxBuffer[0] = 0x0D;
 80004d4:	230d      	movs	r3, #13
 80004d6:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x01;
 80004d8:	2301      	movs	r3, #1
 80004da:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004dc:	1d3a      	adds	r2, r7, #4
 80004de:	230a      	movs	r3, #10
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	2194      	movs	r1, #148	; 0x94
 80004e6:	485e      	ldr	r0, [pc, #376]	; (8000660 <CS43L22_Init+0x19c>)
 80004e8:	f001 fc82 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x99;
 80004f0:	2399      	movs	r3, #153	; 0x99
 80004f2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	230a      	movs	r3, #10
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2302      	movs	r3, #2
 80004fc:	2194      	movs	r1, #148	; 0x94
 80004fe:	4858      	ldr	r0, [pc, #352]	; (8000660 <CS43L22_Init+0x19c>)
 8000500:	f001 fc76 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x47;
 8000504:	2347      	movs	r3, #71	; 0x47
 8000506:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x80;
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	230a      	movs	r3, #10
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	2194      	movs	r1, #148	; 0x94
 8000516:	4852      	ldr	r0, [pc, #328]	; (8000660 <CS43L22_Init+0x19c>)
 8000518:	f001 fc6a 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 800051c:	2332      	movs	r3, #50	; 0x32
 800051e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xFF;
 8000520:	23ff      	movs	r3, #255	; 0xff
 8000522:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	230a      	movs	r3, #10
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2194      	movs	r1, #148	; 0x94
 800052e:	484c      	ldr	r0, [pc, #304]	; (8000660 <CS43L22_Init+0x19c>)
 8000530:	f001 fc5e 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 8000534:	2332      	movs	r3, #50	; 0x32
 8000536:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x7F;
 8000538:	237f      	movs	r3, #127	; 0x7f
 800053a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	230a      	movs	r3, #10
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2194      	movs	r1, #148	; 0x94
 8000546:	4846      	ldr	r0, [pc, #280]	; (8000660 <CS43L22_Init+0x19c>)
 8000548:	f001 fc52 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2194      	movs	r1, #148	; 0x94
 800055e:	4840      	ldr	r0, [pc, #256]	; (8000660 <CS43L22_Init+0x19c>)
 8000560:	f001 fc46 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x04;
 8000564:	2304      	movs	r3, #4
 8000566:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xAF;
 8000568:	23af      	movs	r3, #175	; 0xaf
 800056a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2302      	movs	r3, #2
 8000574:	2194      	movs	r1, #148	; 0x94
 8000576:	483a      	ldr	r0, [pc, #232]	; (8000660 <CS43L22_Init+0x19c>)
 8000578:	f001 fc3a 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0D;
 800057c:	230d      	movs	r3, #13
 800057e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x70;
 8000580:	2370      	movs	r3, #112	; 0x70
 8000582:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	2194      	movs	r1, #148	; 0x94
 800058e:	4834      	ldr	r0, [pc, #208]	; (8000660 <CS43L22_Init+0x19c>)
 8000590:	f001 fc2e 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x05;
 8000594:	2305      	movs	r3, #5
 8000596:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x81;
 8000598:	2381      	movs	r3, #129	; 0x81
 800059a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800059c:	1d3a      	adds	r2, r7, #4
 800059e:	230a      	movs	r3, #10
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	; 0x94
 80005a6:	482e      	ldr	r0, [pc, #184]	; (8000660 <CS43L22_Init+0x19c>)
 80005a8:	f001 fc22 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x06;
 80005ac:	2306      	movs	r3, #6
 80005ae:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x07;
 80005b0:	2307      	movs	r3, #7
 80005b2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	230a      	movs	r3, #10
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	2194      	movs	r1, #148	; 0x94
 80005be:	4828      	ldr	r0, [pc, #160]	; (8000660 <CS43L22_Init+0x19c>)
 80005c0:	f001 fc16 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0A;
 80005c4:	230a      	movs	r3, #10
 80005c6:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2194      	movs	r1, #148	; 0x94
 80005d6:	4822      	ldr	r0, [pc, #136]	; (8000660 <CS43L22_Init+0x19c>)
 80005d8:	f001 fc0a 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x27;
 80005dc:	2327      	movs	r3, #39	; 0x27
 80005de:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2194      	movs	r1, #148	; 0x94
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <CS43L22_Init+0x19c>)
 80005f0:	f001 fbfe 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1A;
 80005f4:	231a      	movs	r3, #26
 80005f6:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 80005f8:	230a      	movs	r3, #10
 80005fa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	230a      	movs	r3, #10
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2194      	movs	r1, #148	; 0x94
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <CS43L22_Init+0x19c>)
 8000608:	f001 fbf2 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1B;
 800060c:	231b      	movs	r3, #27
 800060e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 8000610:	230a      	movs	r3, #10
 8000612:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2194      	movs	r1, #148	; 0x94
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <CS43L22_Init+0x19c>)
 8000620:	f001 fbe6 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1F;
 8000624:	231f      	movs	r3, #31
 8000626:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0F;
 8000628:	230f      	movs	r3, #15
 800062a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	230a      	movs	r3, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	2194      	movs	r1, #148	; 0x94
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <CS43L22_Init+0x19c>)
 8000638:	f001 fbda 	bl	8001df0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x02;
 800063c:	2302      	movs	r3, #2
 800063e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x9E;
 8000640:	239e      	movs	r3, #158	; 0x9e
 8000642:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	230a      	movs	r3, #10
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2194      	movs	r1, #148	; 0x94
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <CS43L22_Init+0x19c>)
 8000650:	f001 fbce 	bl	8001df0 <HAL_I2C_Master_Transmit>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020c00 	.word	0x40020c00
 8000660:	20000028 	.word	0x20000028

08000664 <CS43L22_Beep>:

void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];

	// Set volume and off time
	TxBuffer[0] = 0x1D;		// Register address
 8000670:	231d      	movs	r3, #29
 8000672:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (volume and off time)
 8000674:	2300      	movs	r3, #0
 8000676:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000678:	f107 020c 	add.w	r2, r7, #12
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	2194      	movs	r1, #148	; 0x94
 8000684:	482d      	ldr	r0, [pc, #180]	; (800073c <CS43L22_Beep+0xd8>)
 8000686:	f001 fbb3 	bl	8001df0 <HAL_I2C_Master_Transmit>

	// Set sound frequency
	TxBuffer[0] = 0x1C;		// Register address
 800068a:	231c      	movs	r3, #28
 800068c:	733b      	strb	r3, [r7, #12]
	switch (pitch)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b06      	cmp	r3, #6
 8000692:	d826      	bhi.n	80006e2 <CS43L22_Beep+0x7e>
 8000694:	a201      	add	r2, pc, #4	; (adr r2, 800069c <CS43L22_Beep+0x38>)
 8000696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069a:	bf00      	nop
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006bf 	.word	0x080006bf
 80006a4:	080006c5 	.word	0x080006c5
 80006a8:	080006cb 	.word	0x080006cb
 80006ac:	080006d1 	.word	0x080006d1
 80006b0:	080006d7 	.word	0x080006d7
 80006b4:	080006dd 	.word	0x080006dd
	{
		case C5:
			TxBuffer[1] = 0x01;		// Value (frequency and on time)
 80006b8:	2301      	movs	r3, #1
 80006ba:	737b      	strb	r3, [r7, #13]
			break;
 80006bc:	e014      	b.n	80006e8 <CS43L22_Beep+0x84>

		case D5:
			TxBuffer[1] = 0x02;		// Value (frequency and on time)
 80006be:	2302      	movs	r3, #2
 80006c0:	737b      	strb	r3, [r7, #13]
			break;
 80006c2:	e011      	b.n	80006e8 <CS43L22_Beep+0x84>

		case E5:
			TxBuffer[1] = 0x03;		// Value (frequency and on time)
 80006c4:	2303      	movs	r3, #3
 80006c6:	737b      	strb	r3, [r7, #13]
			break;
 80006c8:	e00e      	b.n	80006e8 <CS43L22_Beep+0x84>

		case F5:
			TxBuffer[1] = 0x04;		// Value (frequency and on time)
 80006ca:	2304      	movs	r3, #4
 80006cc:	737b      	strb	r3, [r7, #13]
			break;
 80006ce:	e00b      	b.n	80006e8 <CS43L22_Beep+0x84>

		case G5:
			TxBuffer[1] = 0x05;		// Value (frequency and on time)
 80006d0:	2305      	movs	r3, #5
 80006d2:	737b      	strb	r3, [r7, #13]
			break;
 80006d4:	e008      	b.n	80006e8 <CS43L22_Beep+0x84>

		case A5:
			TxBuffer[1] = 0x06;		// Value (frequency and on time)
 80006d6:	2306      	movs	r3, #6
 80006d8:	737b      	strb	r3, [r7, #13]
			break;
 80006da:	e005      	b.n	80006e8 <CS43L22_Beep+0x84>

		case B5:
			TxBuffer[1] = 0x07;		// Value (frequency and on time)
 80006dc:	2307      	movs	r3, #7
 80006de:	737b      	strb	r3, [r7, #13]
			break;
 80006e0:	e002      	b.n	80006e8 <CS43L22_Beep+0x84>



		// Assume C4 for all other cases
		default:
			TxBuffer[1] = 0x00;		// Value (frequency and on time)
 80006e2:	2300      	movs	r3, #0
 80006e4:	737b      	strb	r3, [r7, #13]
			break;
 80006e6:	bf00      	nop
	}
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006e8:	f107 020c 	add.w	r2, r7, #12
 80006ec:	230a      	movs	r3, #10
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	2194      	movs	r1, #148	; 0x94
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <CS43L22_Beep+0xd8>)
 80006f6:	f001 fb7b 	bl	8001df0 <HAL_I2C_Master_Transmit>

	// Enable continuous mode (SOUND STARTED)
	TxBuffer[0] = 0x1E;		// Register address
 80006fa:	231e      	movs	r3, #30
 80006fc:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0xC0;		// Value (beep and tone configuration)
 80006fe:	23c0      	movs	r3, #192	; 0xc0
 8000700:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000702:	f107 020c 	add.w	r2, r7, #12
 8000706:	230a      	movs	r3, #10
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2302      	movs	r3, #2
 800070c:	2194      	movs	r1, #148	; 0x94
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <CS43L22_Beep+0xd8>)
 8000710:	f001 fb6e 	bl	8001df0 <HAL_I2C_Master_Transmit>

	// Playing...
	HAL_Delay(duration_ms);
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f000 fbcb 	bl	8000eb0 <HAL_Delay>

	// Disable continuous mode (SOUND STOPED)
	TxBuffer[0] = 0x1E;		// Register address
 800071a:	231e      	movs	r3, #30
 800071c:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (beep and tone configuration)
 800071e:	2300      	movs	r3, #0
 8000720:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	230a      	movs	r3, #10
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2302      	movs	r3, #2
 800072c:	2194      	movs	r1, #148	; 0x94
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <CS43L22_Beep+0xd8>)
 8000730:	f001 fb5e 	bl	8001df0 <HAL_I2C_Master_Transmit>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fb42 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f854 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f93c 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000750:	f000 f91a 	bl	8000988 <MX_DMA_Init>
  MX_I2C1_Init();
 8000754:	f000 f8bc 	bl	80008d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000758:	f000 f8e8 	bl	800092c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  // Init DAC
   CS43L22_Init();
 800075c:	f7ff feb2 	bl	80004c4 <CS43L22_Init>

   // Transmit empty data
   HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8000760:	2264      	movs	r2, #100	; 0x64
 8000762:	4922      	ldr	r1, [pc, #136]	; (80007ec <main+0xac>)
 8000764:	4822      	ldr	r0, [pc, #136]	; (80007f0 <main+0xb0>)
 8000766:	f001 ffdd 	bl	8002724 <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CS43L22_Beep(C5, 400);
 800076a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff78 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(200);
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f000 fb9b 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(D5, 200);
 800077a:	21c8      	movs	r1, #200	; 0xc8
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ff71 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(100);
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f000 fb94 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(E5, 200);
 8000788:	21c8      	movs	r1, #200	; 0xc8
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff ff6a 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f000 fb8d 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(C5, 400);
 8000796:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ff62 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a4:	f000 fb84 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(F5, 300);
 80007a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff ff59 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f000 fb7c 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(G5, 300);
 80007b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff ff51 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(200);
 80007c2:	20c8      	movs	r0, #200	; 0xc8
 80007c4:	f000 fb74 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(A5, 300);
 80007c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007cc:	2005      	movs	r0, #5
 80007ce:	f7ff ff49 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(200);
 80007d2:	20c8      	movs	r0, #200	; 0xc8
 80007d4:	f000 fb6c 	bl	8000eb0 <HAL_Delay>

	  CS43L22_Beep(B5, 300);
 80007d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff41 	bl	8000664 <CS43L22_Beep>
	  HAL_Delay(200);
 80007e2:	20c8      	movs	r0, #200	; 0xc8
 80007e4:	f000 fb64 	bl	8000eb0 <HAL_Delay>
	  CS43L22_Beep(C5, 400);
 80007e8:	e7bf      	b.n	800076a <main+0x2a>
 80007ea:	bf00      	nop
 80007ec:	20000124 	.word	0x20000124
 80007f0:	2000007c 	.word	0x2000007c

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 f97a 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <SystemClock_Config+0xd4>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <SystemClock_Config+0xd4>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SystemClock_Config+0xd4>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <SystemClock_Config+0xd4>)
 800082e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000832:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xd4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <SystemClock_Config+0xd4>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SystemClock_Config+0xd4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <SystemClock_Config+0xd8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <SystemClock_Config+0xd8>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <SystemClock_Config+0xd8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2310      	movs	r3, #16
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fbb3 	bl	8002ff0 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000890:	f000 f8f8 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fe16 	bl	80034e0 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ba:	f000 f8e3 	bl	8000a84 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f001 f92b 	bl	8001b68 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f8b4 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000028 	.word	0x20000028
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_I2S3_Init+0x54>)
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <MX_I2S3_Init+0x58>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_I2S3_Init+0x54>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_I2S3_Init+0x54>)
 8000954:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000958:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2S3_Init+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_I2S3_Init+0x54>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2S3_Init+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2S3_Init+0x54>)
 800096e:	f001 fd99 	bl	80024a4 <HAL_I2S_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000978:	f000 f884 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000007c 	.word	0x2000007c
 8000984:	40003c00 	.word	0x40003c00

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <MX_DMA_Init+0x3c>)
 8000998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2010      	movs	r0, #16
 80009b0:	f000 fb7d 	bl	80010ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009b4:	2010      	movs	r0, #16
 80009b6:	f000 fb96 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_GPIO_Init+0xb4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <MX_GPIO_Init+0xb4>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_GPIO_Init+0xb4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MX_GPIO_Init+0xb8>)
 8000a54:	f001 f86e 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_GPIO_Init+0xb8>)
 8000a70:	f000 fec4 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_I2C_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12c      	bne.n	8000b5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <HAL_I2C_MspInit+0x8c>)
 8000b3c:	f000 fe5e 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <HAL_I2S_MspInit+0x164>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f040 8094 	bne.w	8000cca <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ba6:	23c0      	movs	r3, #192	; 0xc0
 8000ba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fe60 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000bbe:	f7ff ff61 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a3c      	ldr	r2, [pc, #240]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a35      	ldr	r2, [pc, #212]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <HAL_I2S_MspInit+0x168>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c16:	2310      	movs	r3, #16
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <HAL_I2S_MspInit+0x16c>)
 8000c32:	f000 fde3 	bl	80017fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000c36:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <HAL_I2S_MspInit+0x170>)
 8000c54:	f000 fdd2 	bl	80017fc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <HAL_I2S_MspInit+0x178>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c66:	2240      	movs	r2, #64	; 0x40
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000cb0:	f000 fa34 	bl	800111c <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000cba:	f7ff fee3 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_I2S_MspInit+0x174>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40003c00 	.word	0x40003c00
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	200000c4 	.word	0x200000c4
 8000ce8:	40026088 	.word	0x40026088

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f89a 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Stream5_IRQHandler+0x10>)
 8000d46:	f000 faef 	bl	8001328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000c4 	.word	0x200000c4

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 feb1 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fcc9 	bl	8000740 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	200001f0 	.word	0x200001f0

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f94f 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe46 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f967 	bl	8001102 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f92f 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200001ec 	.word	0x200001ec

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001ec 	.word	0x200001ec

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff feb6 	bl	8000e98 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e099      	b.n	800126c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e00f      	b.n	800117a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fe9d 	bl	8000e98 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d908      	bls.n	800117a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e078      	b.n	800126c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e8      	bne.n	800115a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_DMA_Init+0x158>)
 8001194:	4013      	ands	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d107      	bne.n	80011e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4313      	orrs	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b04      	cmp	r3, #4
 800120c:	d117      	bne.n	800123e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa6f 	bl	8001704 <DMA_CheckFifoParam>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800123a:	2301      	movs	r3, #1
 800123c:	e016      	b.n	800126c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa26 	bl	8001698 <DMA_CalcBaseAndBitshift>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	223f      	movs	r2, #63	; 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f010803f 	.word	0xf010803f

08001278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_DMA_Start_IT+0x26>
 800129a:	2302      	movs	r3, #2
 800129c:	e040      	b.n	8001320 <HAL_DMA_Start_IT+0xa8>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12f      	bne.n	8001312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f9b8 	bl	800163c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0216 	orr.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e005      	b.n	800131e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001334:	4b8e      	ldr	r3, [pc, #568]	; (8001570 <HAL_DMA_IRQHandler+0x248>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <HAL_DMA_IRQHandler+0x24c>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0a9b      	lsrs	r3, r3, #10
 8001340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2208      	movs	r2, #8
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2208      	movs	r2, #8
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2201      	movs	r2, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2204      	movs	r2, #4
 80013d0:	409a      	lsls	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d012      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2204      	movs	r2, #4
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2210      	movs	r2, #16
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d043      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d03c      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2210      	movs	r2, #16
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d018      	beq.n	800146a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d024      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
 8001456:	e01f      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
 8001468:	e016      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0208 	bic.w	r2, r2, #8
 8001486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2220      	movs	r2, #32
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 808f 	beq.w	80015c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8087 	beq.w	80015c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2220      	movs	r2, #32
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d136      	bne.n	8001540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0216 	bic.w	r2, r2, #22
 80014e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <HAL_DMA_IRQHandler+0x1da>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0208 	bic.w	r2, r2, #8
 8001510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	223f      	movs	r2, #63	; 0x3f
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001532:	2b00      	cmp	r3, #0
 8001534:	d07e      	beq.n	8001634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
        }
        return;
 800153e:	e079      	b.n	8001634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01d      	beq.n	800158a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10d      	bne.n	8001578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	2b00      	cmp	r3, #0
 8001562:	d031      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
 800156c:	e02c      	b.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
 8001588:	e01e      	b.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0210 	bic.w	r2, r2, #16
 80015a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d032      	beq.n	8001636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d022      	beq.n	8001622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2205      	movs	r2, #5
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d307      	bcc.n	8001610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x2cc>
 800160e:	e000      	b.n	8001612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e000      	b.n	8001636 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001634:	bf00      	nop
    }
  }
}
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d108      	bne.n	800167c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800167a:	e007      	b.n	800168c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3b10      	subs	r3, #16
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <DMA_CalcBaseAndBitshift+0x64>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <DMA_CalcBaseAndBitshift+0x68>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d909      	bls.n	80016da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
 80016d8:	e007      	b.n	80016ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	aaaaaaab 	.word	0xaaaaaaab
 8001700:	08003b84 	.word	0x08003b84

08001704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11f      	bne.n	800175e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d856      	bhi.n	80017d2 <DMA_CheckFifoParam+0xce>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <DMA_CheckFifoParam+0x28>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	0800173d 	.word	0x0800173d
 8001730:	0800174f 	.word	0x0800174f
 8001734:	0800173d 	.word	0x0800173d
 8001738:	080017d3 	.word	0x080017d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d046      	beq.n	80017d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174c:	e043      	b.n	80017d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001756:	d140      	bne.n	80017da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e03d      	b.n	80017da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001766:	d121      	bne.n	80017ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d837      	bhi.n	80017de <DMA_CheckFifoParam+0xda>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <DMA_CheckFifoParam+0x70>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178b 	.word	0x0800178b
 800177c:	08001785 	.word	0x08001785
 8001780:	0800179d 	.word	0x0800179d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
      break;
 8001788:	e030      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800179a:	e022      	b.n	80017e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017a4:	d11f      	bne.n	80017e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017aa:	e01c      	b.n	80017e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d903      	bls.n	80017ba <DMA_CheckFifoParam+0xb6>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d003      	beq.n	80017c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b8:	e018      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
      break;
 80017be:	e015      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      break;
 80017d0:	e00b      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017d2:	bf00      	nop
 80017d4:	e00a      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e008      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e006      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017de:	bf00      	nop
 80017e0:	e004      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
 80017e4:	e002      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;   
 80017e6:	bf00      	nop
 80017e8:	e000      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
    }
  } 
  
  return status; 
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e16b      	b.n	8001af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 815a 	bne.w	8001aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80b4 	beq.w	8001aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b60      	ldr	r3, [pc, #384]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a5b      	ldr	r2, [pc, #364]	; (8001b0c <HAL_GPIO_Init+0x310>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x314>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02b      	beq.n	8001a22 <HAL_GPIO_Init+0x226>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x318>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x222>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x31c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x21e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x320>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x21a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_GPIO_Init+0x324>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x216>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x328>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x212>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_GPIO_Init+0x32c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_GPIO_Init+0x330>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x20a>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00e      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x310>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f ae90 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	40013c00 	.word	0x40013c00

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b50:	e003      	b.n	8001b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	619a      	str	r2, [r3, #24]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e12b      	b.n	8001dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe ffa6 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bcc:	f001 fe40 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8001bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a81      	ldr	r2, [pc, #516]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d807      	bhi.n	8001bec <HAL_I2C_Init+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a80      	ldr	r2, [pc, #512]	; (8001de0 <HAL_I2C_Init+0x278>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e006      	b.n	8001bfa <HAL_I2C_Init+0x92>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a7d      	ldr	r2, [pc, #500]	; (8001de4 <HAL_I2C_Init+0x27c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	bf94      	ite	ls
 8001bf4:	2301      	movls	r3, #1
 8001bf6:	2300      	movhi	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0e7      	b.n	8001dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_I2C_Init+0x280>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0c9b      	lsrs	r3, r3, #18
 8001c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d802      	bhi.n	8001c3c <HAL_I2C_Init+0xd4>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	e009      	b.n	8001c50 <HAL_I2C_Init+0xe8>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_I2C_Init+0x284>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	3301      	adds	r3, #1
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	495c      	ldr	r1, [pc, #368]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d819      	bhi.n	8001ca4 <HAL_I2C_Init+0x13c>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e59      	subs	r1, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_I2C_Init+0x138>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e59      	subs	r1, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9e:	e051      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e04f      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_I2C_Init+0x168>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e012      	b.n	8001cf6 <HAL_I2C_Init+0x18e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Init+0x196>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e022      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10e      	bne.n	8001d24 <HAL_I2C_Init+0x1bc>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e58      	subs	r0, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	440b      	add	r3, r1
 8001d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d22:	e00f      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6809      	ldr	r1, [r1, #0]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6911      	ldr	r1, [r2, #16]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68d2      	ldr	r2, [r2, #12]
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	000186a0 	.word	0x000186a0
 8001de0:	001e847f 	.word	0x001e847f
 8001de4:	003d08ff 	.word	0x003d08ff
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	10624dd3 	.word	0x10624dd3

08001df0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	817b      	strh	r3, [r7, #10]
 8001e00:	4613      	mov	r3, r2
 8001e02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff f848 	bl	8000e98 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	f040 80e0 	bne.w	8001fd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4970      	ldr	r1, [pc, #448]	; (8001fe4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f964 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0d3      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0x50>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0cc      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2210      	movs	r2, #16
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	893a      	ldrh	r2, [r7, #8]
 8001e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f89c 	bl	8001fec <I2C_MasterRequestWrite>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e08d      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ed4:	e066      	b.n	8001fa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fa22 	bl	8002324 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06b      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d11b      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x188>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d017      	beq.n	8001f78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fa19 	bl	80023b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e01a      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d194      	bne.n	8001ed6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	00100002 	.word	0x00100002
 8001fe8:	ffff0000 	.word	0xffff0000

08001fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d006      	beq.n	8002016 <I2C_MasterRequestWrite+0x2a>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d003      	beq.n	8002016 <I2C_MasterRequestWrite+0x2a>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e00b      	b.n	8002040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	2b12      	cmp	r3, #18
 800202e:	d107      	bne.n	8002040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f84f 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	d103      	bne.n	8002070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e035      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	e01b      	b.n	80020c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	11db      	asrs	r3, r3, #7
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 0306 	and.w	r3, r3, #6
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f063 030f 	orn	r3, r3, #15
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <I2C_MasterRequestWrite+0xfc>)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f898 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e010      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <I2C_MasterRequestWrite+0x100>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f888 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00010008 	.word	0x00010008
 80020ec:	00010002 	.word	0x00010002

080020f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002100:	e048      	b.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d044      	beq.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7fe fec5 	bl	8000e98 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d139      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10d      	bne.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x56>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	e00c      	b.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	43da      	mvns	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	429a      	cmp	r2, r3
 8002164:	d116      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e023      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10d      	bne.n	80021ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	e00c      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d093      	beq.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f2:	e071      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d123      	bne.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800221c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e067      	b.n	800231c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002252:	d041      	beq.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7fe fe20 	bl	8000e98 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d136      	bne.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10c      	bne.n	800228e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	e00b      	b.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e021      	b.n	800231c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	43da      	mvns	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e00b      	b.n	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f af6d 	bne.w	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002330:	e034      	b.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f886 	bl	8002444 <I2C_IsAcknowledgeFailed>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e034      	b.n	80023ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d028      	beq.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7fe fda5 	bl	8000e98 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11d      	bne.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d016      	beq.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d1c3      	bne.n	8002332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023c0:	e034      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f83e 	bl	8002444 <I2C_IsAcknowledgeFailed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e034      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d028      	beq.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7fe fd5d 	bl	8000e98 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11d      	bne.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d016      	beq.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d1c3      	bne.n	80023c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d11b      	bne.n	8002494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e128      	b.n	8002708 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a90      	ldr	r2, [pc, #576]	; (8002710 <HAL_I2S_Init+0x26c>)
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fe fb4d 	bl	8000b70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024ec:	f023 030f 	bic.w	r3, r3, #15
 80024f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d060      	beq.n	80025c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800250a:	2310      	movs	r3, #16
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e001      	b.n	8002514 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b20      	cmp	r3, #32
 800251a:	d802      	bhi.n	8002522 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002522:	2001      	movs	r0, #1
 8002524:	f001 fa8a 	bl	8003a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002528:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002532:	d125      	bne.n	8002580 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	fbb2 f2f3 	udiv	r2, r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	3305      	adds	r3, #5
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e01f      	b.n	800259e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	3305      	adds	r3, #5
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e00e      	b.n	800259e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fbb2 f2f3 	udiv	r2, r2, r3
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	3305      	adds	r3, #5
 800259c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_I2S_Init+0x270>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e003      	b.n	80025cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d902      	bls.n	80025d8 <HAL_I2S_Init+0x134>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2bff      	cmp	r3, #255	; 0xff
 80025d6:	d907      	bls.n	80025e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e08f      	b.n	8002708 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6851      	ldr	r1, [r2, #4]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6992      	ldr	r2, [r2, #24]
 800261e:	430a      	orrs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d161      	bne.n	80026f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_I2S_Init+0x274>)
 8002638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a37      	ldr	r2, [pc, #220]	; (800271c <HAL_I2S_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_I2S_Init+0x1a4>
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_I2S_Init+0x27c>)
 8002646:	e001      	b.n	800264c <HAL_I2S_Init+0x1a8>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4932      	ldr	r1, [pc, #200]	; (800271c <HAL_I2S_Init+0x278>)
 8002654:	428a      	cmp	r2, r1
 8002656:	d101      	bne.n	800265c <HAL_I2S_Init+0x1b8>
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_I2S_Init+0x27c>)
 800265a:	e001      	b.n	8002660 <HAL_I2S_Init+0x1bc>
 800265c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002660:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002664:	f023 030f 	bic.w	r3, r3, #15
 8002668:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_I2S_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_I2S_Init+0x1d4>
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_I2S_Init+0x27c>)
 8002676:	e001      	b.n	800267c <HAL_I2S_Init+0x1d8>
 8002678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267c:	2202      	movs	r2, #2
 800267e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a25      	ldr	r2, [pc, #148]	; (800271c <HAL_I2S_Init+0x278>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_I2S_Init+0x1ea>
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_I2S_Init+0x27c>)
 800268c:	e001      	b.n	8002692 <HAL_I2S_Init+0x1ee>
 800268e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d003      	beq.n	80026a8 <HAL_I2S_Init+0x204>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e001      	b.n	80026b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026be:	4313      	orrs	r3, r2
 80026c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_I2S_Init+0x278>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_I2S_Init+0x24c>
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_I2S_Init+0x27c>)
 80026ee:	e001      	b.n	80026f4 <HAL_I2S_Init+0x250>
 80026f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f4:	897a      	ldrh	r2, [r7, #10]
 80026f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	08002a29 	.word	0x08002a29
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	08002b3d 	.word	0x08002b3d
 800271c:	40003800 	.word	0x40003800
 8002720:	40003400 	.word	0x40003400

08002724 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_I2S_Transmit_DMA+0x1a>
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e08e      	b.n	8002860 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2S_Transmit_DMA+0x2e>
 800274e:	2302      	movs	r3, #2
 8002750:	e086      	b.n	8002860 <HAL_I2S_Transmit_DMA+0x13c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	e076      	b.n	8002860 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2203      	movs	r2, #3
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d002      	beq.n	800279e <HAL_I2S_Transmit_DMA+0x7a>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d10a      	bne.n	80027b4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027b2:	e005      	b.n	80027c0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_I2S_Transmit_DMA+0x144>)
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_I2S_Transmit_DMA+0x148>)
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_I2S_Transmit_DMA+0x14c>)
 80027d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027f0:	f7fe fd42 	bl	8001278 <HAL_DMA_Start_IT>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00f      	beq.n	800281a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e022      	b.n	8002860 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002836:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0202 	orr.w	r2, r2, #2
 8002854:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08002907 	.word	0x08002907
 800286c:	080028c5 	.word	0x080028c5
 8002870:	08002923 	.word	0x08002923

08002874 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0202 	bic.w	r2, r2, #2
 80028e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff ffc5 	bl	8002888 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff ffad 	bl	8002874 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0203 	bic.w	r2, r2, #3
 800293e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0208 	orr.w	r2, r3, #8
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ffa5 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10e      	bne.n	80029c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff63 	bl	8002888 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	b292      	uxth	r2, r2
 80029de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	1c9a      	adds	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff3e 	bl	800289c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d13a      	bne.n	8002aba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d109      	bne.n	8002a62 <I2S_IRQHandler+0x3a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d102      	bne.n	8002a62 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffb4 	bl	80029ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d126      	bne.n	8002aba <I2S_IRQHandler+0x92>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d11f      	bne.n	8002aba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a88:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0202 	orr.w	r2, r3, #2
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fefb 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d136      	bne.n	8002b34 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d109      	bne.n	8002ae4 <I2S_IRQHandler+0xbc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d102      	bne.n	8002ae4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ff45 	bl	800296e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d122      	bne.n	8002b34 <I2S_IRQHandler+0x10c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d11b      	bne.n	8002b34 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b0a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff febe 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a92      	ldr	r2, [pc, #584]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b56:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b58:	e001      	b.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b74:	4b8a      	ldr	r3, [pc, #552]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b76:	e001      	b.n	8002b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d004      	beq.n	8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 8099 	bne.w	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f925 	bl	8002df8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9c8 	bl	8002f58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d13a      	bne.n	8002c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d035      	beq.n	8002c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002be6:	4b6e      	ldr	r3, [pc, #440]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002be8:	e001      	b.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4969      	ldr	r1, [pc, #420]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bf6:	428b      	cmp	r3, r1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bfa:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bfc:	e001      	b.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fe34 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	f040 80c3 	bne.w	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80bd 	beq.w	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a49      	ldr	r2, [pc, #292]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c7a:	4b49      	ldr	r3, [pc, #292]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c7c:	e001      	b.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4944      	ldr	r1, [pc, #272]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c8a:	428b      	cmp	r3, r1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c90:	e001      	b.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fdf6 	bl	80028b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cc4:	e089      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8be 	bl	8002e5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8fd 	bl	8002ef4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d12f      	bne.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02a      	beq.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d2a:	e001      	b.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4919      	ldr	r1, [pc, #100]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d3e:	e001      	b.n	8002d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fda6 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d136      	bne.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d031      	beq.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d84:	e001      	b.n	8002d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4902      	ldr	r1, [pc, #8]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d92:	428b      	cmp	r3, r1
 8002d94:	d106      	bne.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002d96:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d98:	e006      	b.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002d9a:	bf00      	nop
 8002d9c:	40003800 	.word	0x40003800
 8002da0:	40003400 	.word	0x40003400
 8002da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fd6c 	bl	80028b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dd8:	e000      	b.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dda:	bf00      	nop
}
 8002ddc:	bf00      	nop
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c99      	adds	r1, r3, #2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6251      	str	r1, [r2, #36]	; 0x24
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d113      	bne.n	8002e52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ffc9 	bl	8002de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c99      	adds	r1, r3, #2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e6e:	8819      	ldrh	r1, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <I2SEx_TxISR_I2SExt+0x90>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <I2SEx_TxISR_I2SExt+0x22>
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8002e7c:	e001      	b.n	8002e82 <I2SEx_TxISR_I2SExt+0x26>
 8002e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e82:	460a      	mov	r2, r1
 8002e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d121      	bne.n	8002ee2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <I2SEx_TxISR_I2SExt+0x90>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <I2SEx_TxISR_I2SExt+0x50>
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8002eaa:	e001      	b.n	8002eb0 <I2SEx_TxISR_I2SExt+0x54>
 8002eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <I2SEx_TxISR_I2SExt+0x90>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d101      	bne.n	8002ec0 <I2SEx_TxISR_I2SExt+0x64>
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8002ebe:	e001      	b.n	8002ec4 <I2SEx_TxISR_I2SExt+0x68>
 8002ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ec8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff81 	bl	8002de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40003800 	.word	0x40003800
 8002ef0:	40003400 	.word	0x40003400

08002ef4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d8      	ldr	r0, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	1c99      	adds	r1, r3, #2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f0c:	b282      	uxth	r2, r0
 8002f0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d113      	bne.n	8002f50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ff4a 	bl	8002de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <I2SEx_RxISR_I2SExt+0x16>
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <I2SEx_RxISR_I2SExt+0x94>)
 8002f6c:	e001      	b.n	8002f72 <I2SEx_RxISR_I2SExt+0x1a>
 8002f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f72:	68d8      	ldr	r0, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	1c99      	adds	r1, r3, #2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f7e:	b282      	uxth	r2, r0
 8002f80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d121      	bne.n	8002fde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <I2SEx_RxISR_I2SExt+0x50>
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <I2SEx_RxISR_I2SExt+0x94>)
 8002fa6:	e001      	b.n	8002fac <I2SEx_RxISR_I2SExt+0x54>
 8002fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	d101      	bne.n	8002fbc <I2SEx_RxISR_I2SExt+0x64>
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <I2SEx_RxISR_I2SExt+0x94>)
 8002fba:	e001      	b.n	8002fc0 <I2SEx_RxISR_I2SExt+0x68>
 8002fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff03 	bl	8002de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40003800 	.word	0x40003800
 8002fec:	40003400 	.word	0x40003400

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e267      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b85      	ldr	r3, [pc, #532]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b82      	ldr	r3, [pc, #520]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e242      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b76      	ldr	r3, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a75      	ldr	r2, [pc, #468]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b70      	ldr	r3, [pc, #448]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6f      	ldr	r2, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6c      	ldr	r2, [pc, #432]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a68      	ldr	r2, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fef6 	bl	8000e98 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fef2 	bl	8000e98 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e207      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fee2 	bl	8000e98 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd fede 	bl	8000e98 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1f3      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c7      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4937      	ldr	r1, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x244>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fd fe97 	bl	8000e98 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316e:	f7fd fe93 	bl	8000e98 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a8      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4925      	ldr	r1, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x244>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fd fe76 	bl	8000e98 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fd fe72 	bl	8000e98 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e187      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d036      	beq.n	8003248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x248>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fe56 	bl	8000e98 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fe52 	bl	8000e98 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e167      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
 800320e:	e01b      	b.n	8003248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_OscConfig+0x248>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fd fe3f 	bl	8000e98 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e00e      	b.n	800323c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7fd fe3b 	bl	8000e98 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d907      	bls.n	800323c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e150      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ea      	bne.n	800321e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8097 	beq.w	8003384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a7c      	ldr	r2, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b7a      	ldr	r3, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b77      	ldr	r3, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003292:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7fd fdfb 	bl	8000e98 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fd fdf7 	bl	8000e98 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e10c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x2ea>
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a63      	ldr	r2, [pc, #396]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x30c>
 80032e2:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032fc:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	4b55      	ldr	r3, [pc, #340]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a54      	ldr	r2, [pc, #336]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fd fdbc 	bl	8000e98 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fd fdb8 	bl	8000e98 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0cb      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCC_OscConfig+0x334>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fd fda6 	bl	8000e98 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd fda2 	bl	8000e98 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ee      	bne.n	8003350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a1 	beq.w	80034d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d05c      	beq.n	8003454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d141      	bne.n	8003426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fd fd76 	bl	8000e98 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fd72 	bl	8000e98 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e087      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd fd4b 	bl	8000e98 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fd47 	bl	8000e98 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e05c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x416>
 8003424:	e054      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fd34 	bl	8000e98 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fd30 	bl	8000e98 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e045      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x444>
 8003452:	e03d      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e038      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x4ec>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d028      	beq.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d121      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0cc      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d90c      	bls.n	800351c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b65      	ldr	r3, [pc, #404]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b63      	ldr	r3, [pc, #396]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0b8      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003534:	4b59      	ldr	r3, [pc, #356]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800353e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	494d      	ldr	r1, [pc, #308]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d044      	beq.n	8003600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e067      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b37      	ldr	r3, [pc, #220]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4934      	ldr	r1, [pc, #208]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd fc62 	bl	8000e98 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fd fc5e 	bl	8000e98 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d20c      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e032      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4916      	ldr	r1, [pc, #88]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	490e      	ldr	r1, [pc, #56]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003666:	f000 f821 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490a      	ldr	r1, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fbc2 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	08003b6c 	.word	0x08003b6c
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b090      	sub	sp, #64	; 0x40
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036bc:	2300      	movs	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d00d      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x40>
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f200 80a1 	bhi.w	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036de:	e09b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036e4:	e09b      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e6:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ea:	e098      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	627a      	str	r2, [r7, #36]	; 0x24
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003714:	2100      	movs	r1, #0
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003718:	fb03 f201 	mul.w	r2, r3, r1
 800371c:	2300      	movs	r3, #0
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	4413      	add	r3, r2
 8003724:	4a43      	ldr	r2, [pc, #268]	; (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003726:	fba0 1202 	umull	r1, r2, r0, r2
 800372a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372c:	460a      	mov	r2, r1
 800372e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003732:	4413      	add	r3, r2
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	2200      	movs	r2, #0
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	61fa      	str	r2, [r7, #28]
 800373e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003746:	f7fc fd3f 	bl	80001c8 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4613      	mov	r3, r2
 8003750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003752:	e053      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	617a      	str	r2, [r7, #20]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003766:	f04f 0b00 	mov.w	fp, #0
 800376a:	4652      	mov	r2, sl
 800376c:	465b      	mov	r3, fp
 800376e:	f04f 0000 	mov.w	r0, #0
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377c:	0150      	lsls	r0, r2, #5
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ebb2 080a 	subs.w	r8, r2, sl
 8003786:	eb63 090b 	sbc.w	r9, r3, fp
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800379a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800379e:	ebb2 0408 	subs.w	r4, r2, r8
 80037a2:	eb63 0509 	sbc.w	r5, r3, r9
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	00eb      	lsls	r3, r5, #3
 80037b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b4:	00e2      	lsls	r2, r4, #3
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	eb14 030a 	adds.w	r3, r4, sl
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	eb45 030b 	adc.w	r3, r5, fp
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d2:	4629      	mov	r1, r5
 80037d4:	028b      	lsls	r3, r1, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037dc:	4621      	mov	r1, r4
 80037de:	028a      	lsls	r2, r1, #10
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e6:	2200      	movs	r2, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f0:	f7fc fcea 	bl	80001c8 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800380c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	017d7840 	.word	0x017d7840

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08003b7c 	.word	0x08003b7c

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d035      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a0:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a6:	f7fd faf7 	bl	8000e98 <HAL_GetTick>
 80038aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ae:	f7fd faf3 	bl	8000e98 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0b0      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	019a      	lsls	r2, r3, #6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	071b      	lsls	r3, r3, #28
 80038d8:	4955      	ldr	r1, [pc, #340]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038e6:	f7fd fad7 	bl	8000e98 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ee:	f7fd fad3 	bl	8000e98 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e090      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003900:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8083 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a43      	ldr	r2, [pc, #268]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3e      	ldr	r2, [pc, #248]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003942:	f7fd faa9 	bl	8000e98 <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fd faa5 	bl	8000e98 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e062      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800395c:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02f      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d114      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fd fa73 	bl	8000e98 <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd fa6f 	bl	8000e98 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e02a      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
 8003a00:	e005      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a0c:	6093      	str	r3, [r2, #8]
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	4905      	ldr	r1, [pc, #20]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	42470068 	.word	0x42470068
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40007000 	.word	0x40007000
 8003a38:	42470e40 	.word	0x42470e40

08003a3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d13f      	bne.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a70:	d12f      	bne.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a72:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a74:	617b      	str	r3, [r7, #20]
          break;
 8003a76:	e02f      	b.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a84:	d108      	bne.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	e007      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac2:	0f1b      	lsrs	r3, r3, #28
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
          break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
          break;
 8003ad6:	bf00      	nop
        }
      }
      break;
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003ada:	bf00      	nop
    }
  }
  return frequency;
 8003adc:	697b      	ldr	r3, [r7, #20]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00bb8000 	.word	0x00bb8000
 8003af4:	017d7840 	.word	0x017d7840
 8003af8:	00f42400 	.word	0x00f42400

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 f818 	bl	8003b54 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003b94 	.word	0x08003b94
 8003b48:	08003b94 	.word	0x08003b94
 8003b4c:	08003b94 	.word	0x08003b94
 8003b50:	08003b98 	.word	0x08003b98

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
